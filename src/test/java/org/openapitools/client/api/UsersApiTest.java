/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlockUserMutationResponse;
import org.openapitools.client.model.BlockUserRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Get2ListsIdFollowersResponse;
import org.openapitools.client.model.Get2ListsIdMembersResponse;
import org.openapitools.client.model.Get2TweetsIdLikingUsersResponse;
import org.openapitools.client.model.Get2TweetsIdRetweetedByResponse;
import org.openapitools.client.model.Get2UsersByResponse;
import org.openapitools.client.model.Get2UsersByUsernameUsernameResponse;
import org.openapitools.client.model.Get2UsersIdBlockingResponse;
import org.openapitools.client.model.Get2UsersIdFollowersResponse;
import org.openapitools.client.model.Get2UsersIdFollowingResponse;
import org.openapitools.client.model.Get2UsersIdMutingResponse;
import org.openapitools.client.model.Get2UsersIdResponse;
import org.openapitools.client.model.Get2UsersMeResponse;
import org.openapitools.client.model.Get2UsersResponse;
import org.openapitools.client.model.MuteUserMutationResponse;
import org.openapitools.client.model.MuteUserRequest;
import org.openapitools.client.model.Problem;
import java.util.Set;
import org.openapitools.client.model.UsersFollowingCreateRequest;
import org.openapitools.client.model.UsersFollowingCreateResponse;
import org.openapitools.client.model.UsersFollowingDeleteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * User lookup me
     *
     * This endpoint returns information about the requesting User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMyUserTest() throws ApiException {
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersMeResponse response = api.findMyUser(userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * User lookup by ID
     *
     * This endpoint returns information about a User. Specify User by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        String id = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersIdResponse response = api.findUserById(id, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * User lookup by username
     *
     * This endpoint returns information about a User. Specify User by username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByUsernameTest() throws ApiException {
        String username = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersByUsernameUsernameResponse response = api.findUserByUsername(username, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * User lookup by IDs
     *
     * This endpoint returns information about Users. Specify Users by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersByIdTest() throws ApiException {
        List<String> ids = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersResponse response = api.findUsersById(ids, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * User lookup by usernames
     *
     * This endpoint returns information about Users. Specify Users by their username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersByUsernameTest() throws ApiException {
        List<String> usernames = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersByResponse response = api.findUsersByUsername(usernames, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Returns User objects that follow a List by the provided List ID
     *
     * Returns a list of Users that follow a List by the provided List ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2ListsIdFollowersResponse response = api.listGetFollowers(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Returns User objects that are members of a List by the provided List ID.
     *
     * Returns a list of Users that are members of a List by the provided List ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGetMembersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2ListsIdMembersResponse response = api.listGetMembers(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Returns User objects that have liked the provided Tweet ID
     *
     * Returns a list of Users that have liked the provided Tweet ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsIdLikingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2TweetsIdLikingUsersResponse response = api.tweetsIdLikingUsers(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Returns User objects that have retweeted the provided Tweet ID
     *
     * Returns a list of Users that have retweeted the provided Tweet ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tweetsIdRetweetingUsersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2TweetsIdRetweetedByResponse response = api.tweetsIdRetweetingUsers(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Block User by User ID
     *
     * Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBlockTest() throws ApiException {
        String id = null;
        BlockUserRequest blockUserRequest = null;
        BlockUserMutationResponse response = api.usersIdBlock(id, blockUserRequest);
        // TODO: test validations
    }

    /**
     * Returns User objects that are blocked by provided User ID
     *
     * Returns a list of Users that are blocked by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBlockingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersIdBlockingResponse response = api.usersIdBlocking(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Follow User
     *
     * Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowTest() throws ApiException {
        String id = null;
        UsersFollowingCreateRequest usersFollowingCreateRequest = null;
        UsersFollowingCreateResponse response = api.usersIdFollow(id, usersFollowingCreateRequest);
        // TODO: test validations
    }

    /**
     * Followers by User ID
     *
     * Returns a list of Users who are followers of the specified User ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowersTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersIdFollowersResponse response = api.usersIdFollowers(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Following by User ID
     *
     * Returns a list of Users that are being followed by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdFollowingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersIdFollowingResponse response = api.usersIdFollowing(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Mute User by User ID.
     *
     * Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdMuteTest() throws ApiException {
        String id = null;
        MuteUserRequest muteUserRequest = null;
        MuteUserMutationResponse response = api.usersIdMute(id, muteUserRequest);
        // TODO: test validations
    }

    /**
     * Returns User objects that are muted by the provided User ID
     *
     * Returns a list of Users that are muted by the provided User ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdMutingTest() throws ApiException {
        String id = null;
        Integer maxResults = null;
        String paginationToken = null;
        Set<String> userFields = null;
        Set<String> expansions = null;
        Set<String> tweetFields = null;
        Get2UsersIdMutingResponse response = api.usersIdMuting(id, maxResults, paginationToken, userFields, expansions, tweetFields);
        // TODO: test validations
    }

    /**
     * Unblock User by User ID
     *
     * Causes the source User to unblock the target User. The source User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnblockTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
        BlockUserMutationResponse response = api.usersIdUnblock(sourceUserId, targetUserId);
        // TODO: test validations
    }

    /**
     * Unfollow User
     *
     * Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnfollowTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
        UsersFollowingDeleteResponse response = api.usersIdUnfollow(sourceUserId, targetUserId);
        // TODO: test validations
    }

    /**
     * Unmute User by User ID
     *
     * Causes the source User to unmute the target User. The source User must match the User context authorizing the request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdUnmuteTest() throws ApiException {
        String sourceUserId = null;
        String targetUserId = null;
        MuteUserMutationResponse response = api.usersIdUnmute(sourceUserId, targetUserId);
        // TODO: test validations
    }

}
