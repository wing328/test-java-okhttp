/*
 * Twitter API v2
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.54
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.TweetComplianceSchema;
import org.openapitools.client.model.TweetDeleteComplianceSchema;
import org.openapitools.client.model.TweetDropComplianceSchema;
import org.openapitools.client.model.TweetEditComplianceObjectSchema;
import org.openapitools.client.model.TweetEditComplianceSchema;
import org.openapitools.client.model.TweetTakedownComplianceSchema;
import org.openapitools.client.model.TweetUndropComplianceSchema;
import org.openapitools.client.model.TweetWithheldComplianceSchema;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TweetComplianceData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TweetComplianceData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TweetComplianceData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TweetComplianceData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TweetDeleteComplianceSchema> adapterTweetDeleteComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(TweetDeleteComplianceSchema.class));
            final TypeAdapter<TweetDropComplianceSchema> adapterTweetDropComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(TweetDropComplianceSchema.class));
            final TypeAdapter<TweetEditComplianceSchema> adapterTweetEditComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(TweetEditComplianceSchema.class));
            final TypeAdapter<TweetUndropComplianceSchema> adapterTweetUndropComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(TweetUndropComplianceSchema.class));
            final TypeAdapter<TweetWithheldComplianceSchema> adapterTweetWithheldComplianceSchema = gson.getDelegateAdapter(this, TypeToken.get(TweetWithheldComplianceSchema.class));

            return (TypeAdapter<T>) new TypeAdapter<TweetComplianceData>() {
                @Override
                public void write(JsonWriter out, TweetComplianceData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TweetDeleteComplianceSchema`
                    if (value.getActualInstance() instanceof TweetDeleteComplianceSchema) {
                        JsonObject obj = adapterTweetDeleteComplianceSchema.toJsonTree((TweetDeleteComplianceSchema)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TweetDropComplianceSchema`
                    if (value.getActualInstance() instanceof TweetDropComplianceSchema) {
                        JsonObject obj = adapterTweetDropComplianceSchema.toJsonTree((TweetDropComplianceSchema)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TweetEditComplianceSchema`
                    if (value.getActualInstance() instanceof TweetEditComplianceSchema) {
                        JsonObject obj = adapterTweetEditComplianceSchema.toJsonTree((TweetEditComplianceSchema)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TweetUndropComplianceSchema`
                    if (value.getActualInstance() instanceof TweetUndropComplianceSchema) {
                        JsonObject obj = adapterTweetUndropComplianceSchema.toJsonTree((TweetUndropComplianceSchema)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TweetWithheldComplianceSchema`
                    if (value.getActualInstance() instanceof TweetWithheldComplianceSchema) {
                        JsonObject obj = adapterTweetWithheldComplianceSchema.toJsonTree((TweetWithheldComplianceSchema)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema");
                }

                @Override
                public TweetComplianceData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TweetDeleteComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TweetDeleteComplianceSchema.validateJsonObject(jsonObject);
                        actualAdapter = adapterTweetDeleteComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TweetDeleteComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TweetDeleteComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TweetDeleteComplianceSchema'", e);
                    }

                    // deserialize TweetDropComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TweetDropComplianceSchema.validateJsonObject(jsonObject);
                        actualAdapter = adapterTweetDropComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TweetDropComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TweetDropComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TweetDropComplianceSchema'", e);
                    }

                    // deserialize TweetEditComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TweetEditComplianceSchema.validateJsonObject(jsonObject);
                        actualAdapter = adapterTweetEditComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TweetEditComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TweetEditComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TweetEditComplianceSchema'", e);
                    }

                    // deserialize TweetUndropComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TweetUndropComplianceSchema.validateJsonObject(jsonObject);
                        actualAdapter = adapterTweetUndropComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TweetUndropComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TweetUndropComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TweetUndropComplianceSchema'", e);
                    }

                    // deserialize TweetWithheldComplianceSchema
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TweetWithheldComplianceSchema.validateJsonObject(jsonObject);
                        actualAdapter = adapterTweetWithheldComplianceSchema;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TweetWithheldComplianceSchema'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TweetWithheldComplianceSchema failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TweetWithheldComplianceSchema'", e);
                    }

                    if (match == 1) {
                        TweetComplianceData ret = new TweetComplianceData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TweetComplianceData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TweetComplianceData() {
        super("oneOf", Boolean.FALSE);
    }

    public TweetComplianceData(TweetDeleteComplianceSchema o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TweetComplianceData(TweetDropComplianceSchema o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TweetComplianceData(TweetEditComplianceSchema o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TweetComplianceData(TweetUndropComplianceSchema o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TweetComplianceData(TweetWithheldComplianceSchema o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TweetDeleteComplianceSchema", new GenericType<TweetDeleteComplianceSchema>() {
        });
        schemas.put("TweetDropComplianceSchema", new GenericType<TweetDropComplianceSchema>() {
        });
        schemas.put("TweetEditComplianceSchema", new GenericType<TweetEditComplianceSchema>() {
        });
        schemas.put("TweetUndropComplianceSchema", new GenericType<TweetUndropComplianceSchema>() {
        });
        schemas.put("TweetWithheldComplianceSchema", new GenericType<TweetWithheldComplianceSchema>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TweetComplianceData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TweetDeleteComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TweetDropComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TweetEditComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TweetUndropComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TweetWithheldComplianceSchema) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema");
    }

    /**
     * Get the actual instance, which can be the following:
     * TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema
     *
     * @return The actual instance (TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TweetDeleteComplianceSchema`. If the actual instance is not `TweetDeleteComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TweetDeleteComplianceSchema`
     * @throws ClassCastException if the instance is not `TweetDeleteComplianceSchema`
     */
    public TweetDeleteComplianceSchema getTweetDeleteComplianceSchema() throws ClassCastException {
        return (TweetDeleteComplianceSchema)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TweetDropComplianceSchema`. If the actual instance is not `TweetDropComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TweetDropComplianceSchema`
     * @throws ClassCastException if the instance is not `TweetDropComplianceSchema`
     */
    public TweetDropComplianceSchema getTweetDropComplianceSchema() throws ClassCastException {
        return (TweetDropComplianceSchema)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TweetEditComplianceSchema`. If the actual instance is not `TweetEditComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TweetEditComplianceSchema`
     * @throws ClassCastException if the instance is not `TweetEditComplianceSchema`
     */
    public TweetEditComplianceSchema getTweetEditComplianceSchema() throws ClassCastException {
        return (TweetEditComplianceSchema)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TweetUndropComplianceSchema`. If the actual instance is not `TweetUndropComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TweetUndropComplianceSchema`
     * @throws ClassCastException if the instance is not `TweetUndropComplianceSchema`
     */
    public TweetUndropComplianceSchema getTweetUndropComplianceSchema() throws ClassCastException {
        return (TweetUndropComplianceSchema)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TweetWithheldComplianceSchema`. If the actual instance is not `TweetWithheldComplianceSchema`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TweetWithheldComplianceSchema`
     * @throws ClassCastException if the instance is not `TweetWithheldComplianceSchema`
     */
    public TweetWithheldComplianceSchema getTweetWithheldComplianceSchema() throws ClassCastException {
        return (TweetWithheldComplianceSchema)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TweetComplianceData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with TweetDeleteComplianceSchema
    try {
      TweetDeleteComplianceSchema.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TweetDeleteComplianceSchema failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TweetDropComplianceSchema
    try {
      TweetDropComplianceSchema.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TweetDropComplianceSchema failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TweetEditComplianceSchema
    try {
      TweetEditComplianceSchema.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TweetEditComplianceSchema failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TweetUndropComplianceSchema
    try {
      TweetUndropComplianceSchema.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TweetUndropComplianceSchema failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TweetWithheldComplianceSchema
    try {
      TweetWithheldComplianceSchema.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TweetWithheldComplianceSchema failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for TweetComplianceData with oneOf schemas: TweetDeleteComplianceSchema, TweetDropComplianceSchema, TweetEditComplianceSchema, TweetUndropComplianceSchema, TweetWithheldComplianceSchema. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of TweetComplianceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TweetComplianceData
  * @throws IOException if the JSON string is invalid with respect to TweetComplianceData
  */
  public static TweetComplianceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TweetComplianceData.class);
  }

 /**
  * Convert an instance of TweetComplianceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

